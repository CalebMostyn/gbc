#ifndef INSTRUCTION_H
#define INSTRUCTION_H

// 8-bit load
#define LD_R_R(x) ((x&(0xC0))==(0x40))
#define LD_R_I(x) ((x&(0xC7))==(0x06))
#define LD_R_HLA(x) ((x&(0xC7))==(0x46))
#define LD_HLA_R(x) ((x&(0xF8))==(0x70))
#define LD_HLA_I(x) (x==(0x36))
#define LD_A_BCA(x) (x==(0x0A))
#define LD_A_DEA(x) (x==(0x1A))
#define LD_BCA_A(x) (x==(0x02))
#define LD_DEA_A(x) (x==(0x12))
#define LD_A_IIA(x) (x==(0xFA))
#define LD_IIA_A(x) (x==(0xEA))
#define LD_A_CA(x) (x==(0xF2))
#define LD_CA_A(x) (x==(0xE2))
#define LD_A_IA(x) (x==(0xF0))
#define LD_IA_A(x) (x==(0xE0))
#define LD_A_HLA_DEC(x) (x==(0x3A))
#define LD_HLA_A_DEC(x) (x==(0x32))
#define LD_A_HLA_INC(x) (x==(0x2A))
#define LD_HLA_A_INC(x) (x==(0x22))

//16-bit load
#define LD_RP_II(x) ((x&(0xCF))==(0x01))
#define LD_IIA_SP(x) (x==(0x08))
#define LD_SP_HL(x) (x==(0xF9))
#define PUSH(x) ((x&(0xCF))==(0xC5))
#define POP(x) ((x&(0xCF))==(0xC1))
#define LD_HL_SPE(x) (x==(0xF8))

// 8-bit arithmetic
#define ADD(x) ((x&(0xF8))==(0x80))
#define ADD_HL(x) (x==(0x86))
#define ADDI(x) (x==(0xC6))
#define ADDI_CYCLES 2
#define ADC(x) ((x&(0xF8))==(0x88))
#define ADC_HL(x) (x==(0x8E))
#define ADCI(x) (x==(0xCE))
#define ADDCI_CYCLES 2
#define SUB(x) ((x&(0xF8))==(0x90))
#define SUB_HL(x) (x==(0x96))
#define SUBI(x) (x==(0xD6))
#define SUBI_CYCLES 2
#define SBC(x) ((x&(0xF8))==(0x98))
#define SBC_HL(x) (x==(0x9E))
#define SBCI(x) (x==(0xDE))
#define CP(x) ((x&(0xF8))==(0xB8))
#define CP_HL(x) (x==(0xBE))
#define CPI(x) (x==(0xFE))
#define CPI_CYCLES 2
#define INC(x) ((x&(0xC7))==(0x04))
#define INC_HL(x) (x==(0x34))
#define DEC(x) ((x&(0xC7))==(0x05))
#define DEC_HL(x) (x==(0x35))
#define AND(x) ((x&(0xF8))==(0xA0))
#define AND_HL(x) (x==(0xA6))
#define ANDI(x) (x==(0xE6))
#define ANDI_CYCLES 2
#define OR(x) ((x&(0xF8))==(0xB0))
#define OR_HL(x) (x==(0xB6))
#define ORI(x) (x==(0xF6))
#define ORI_CYCLES 2
#define XOR(x) ((x&(0xF8))==(0xA8))
#define XOR_HL(x) (x==(0xAE))
#define XORI(x) (x==(0xEE))
#define XORI_CYCLES 2
#define CCF(x) (x==(0x3F))
#define SCF(x) (x==(0x37))
#define DAA(x) (x==(0x27))
#define CPL(x) (x==(0x2F))

// 16-bit arithmetic
#define INC_RP(x) ((x&(0xCF))==(0x03))
#define INC_RP_CYCLES 2
#define DEC_RP(x) ((x&(0xCF))==(0x0B))
#define DEC_RP_CYCLES 2
#define ADD_HL_RP(x) ((x&(0xCF))==(0x09))
#define ADD_HL_RP_CYCLES 2
#define ADD_SPE(x) (x==(0xE8))
#define ADD_SPE_CYCLES 4

// rotate, shift, bit
#define RLCA(x) (x==(0x07))
#define RRCA(x) (x==(0x0F))
#define RLA(x) (x==(0x17))
#define RRA(x) (x==(0x1F))
#define RLC(x) ((x&(0xF8))==(0x00))
#define RLC_CYCLES 2
#define RLC_HL(x) (x==(0x06))
#define RRC(x) ((x&(0xF8))==(0x08))
#define RRC_CYCLES 2
#define RRC_HL(x) (x==(0x0E))
#define RL(x) ((x&(0xF8))==(0x10))
#define RL_CYCLES 2
#define RL_HL(x) (x==(0x16))
#define RR(x) ((x&(0xF8))==(0x18))
#define RR_CYCLES 2
#define RR_HL(x) (x==(0x1E))
#define SLA(x) ((x&(0xF8))==(0x20))
#define SLA_CYCLES 2
#define SLA_HL(x) (x==(0x26))
#define SRA(x) ((x&(0xF8))==(0x28))
#define SRA_CYCLES 2
#define SRA_HL(x) (x==(0x2E))
#define SWAP(x) ((x&(0xF8))==(0x30))
#define SWAP_CYCLES 2
#define SWAP_HL(x) (x==(0x36))
#define SRL(x) ((x&(0xF8))==(0x38))
#define SRL_CYCLES 2
#define SRL_HL(x) (x==(0x3E))
#define BIT(x) ((x&(0xC0))==(0x40))
#define BIT_CYCLES 2
#define BIT_HL(x) ((x&(0xC7))==(0x46))
#define RES(x) ((x&(0xC0))==(0x80))
#define RES_CYCLES 2
#define RES_HL(x) ((x&(0xC7))==(0x86))
#define SET(x) ((x&(0xC0))==(0xC0))
#define SET_CYCLES 2
#define SET_HL(x) ((x&(0xC7))==(0xC6))

// control flow
#define JP_II(x) (x==(0xC3))
#define JP_II_CYCLES 4
#define JP_HL(x) (x==(0xE9))
#define JPC(x) ((x&(0xE7))==(0xC2))
#define JPC_TRUE_CYCLES 4
#define JPC_FALSE_CYCLES 3
#define JR(x) (x==(0x18))
#define JR_CYCLES 3
#define JRC(x) ((x&(0xE7))==(0x20))
#define JRC_TRUE_CYCLES 3
#define JRC_FALSE_CYCLES 2
#define CALL(x) (x==(0xCD))
#define CALLC(x) ((x&(0xE7))==(0xC4))
#define RET(x) (x==(0xC9))
#define RETC(x) ((x&(0xE7))==(0xC0))
#define RETI(x) (x==(0xD9))
#define RST(x) ((x&(0xC7))==(0xC7))

// misc
#define HALT(x) (x==(0x76))
#define STOP(x) (x==(0x10))
#define DI(x) (x==(0xF3))
#define EI(x) (x==(0xFB))
#define NOP(x) (x==(0x00))

#endif // INSTRUCTIONS_H
